;; Analyzed by ClojureScript 0.0-3308
{:use-macros {go cljs.core.async.macros}, :excludes #{}, :name clojurepractice.core, :imports nil, :requires {reagent reagent.core, reagent.core reagent.core}, :uses nil, :defs {app-state {:name clojurepractice.core/app-state, :file "src/clojurepractice/core.cljs", :line 7, :column 1, :end-line 7, :end-column 19, :meta {:file "/home/dna-dev/Documents/practice/clojurepractice/src/clojurepractice/core.cljs", :line 7, :column 10, :end-line 7, :end-column 19}}, multiply {:protocol-inline nil, :meta {:file "/home/dna-dev/Documents/practice/clojurepractice/src/clojurepractice/core.cljs", :line 30, :column 7, :end-line 30, :end-column 15, :arglists (quote ([a b]))}, :name clojurepractice.core/multiply, :variadic false, :file "src/clojurepractice/core.cljs", :end-column 15, :method-params ([a b]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 30, :end-line 30, :max-fixed-arity 2, :fn-var true, :arglists (quote ([a b]))}, mapping {:protocol-inline nil, :meta {:file "/home/dna-dev/Documents/practice/clojurepractice/src/clojurepractice/core.cljs", :line 34, :column 7, :end-line 34, :end-column 14, :arglists (quote ([item]))}, :name clojurepractice.core/mapping, :variadic false, :file "src/clojurepractice/core.cljs", :end-column 14, :method-params ([item]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 34, :end-line 34, :max-fixed-arity 1, :fn-var true, :arglists (quote ([item]))}, items-list {:protocol-inline nil, :meta {:file "/home/dna-dev/Documents/practice/clojurepractice/src/clojurepractice/core.cljs", :line 50, :column 7, :end-line 50, :end-column 17, :arglists (quote ([items iteration]))}, :name clojurepractice.core/items-list, :variadic false, :file "src/clojurepractice/core.cljs", :end-column 17, :method-params ([items iteration]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 50, :end-line 50, :max-fixed-arity 2, :fn-var true, :arglists (quote ([items iteration]))}, header {:protocol-inline nil, :meta {:file "/home/dna-dev/Documents/practice/clojurepractice/src/clojurepractice/core.cljs", :line 77, :column 7, :end-line 77, :end-column 13, :arglists (quote ([message]))}, :name clojurepractice.core/header, :variadic false, :file "src/clojurepractice/core.cljs", :end-column 13, :method-params ([message]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 77, :end-line 77, :max-fixed-arity 1, :fn-var true, :arglists (quote ([message]))}, buttons {:protocol-inline nil, :meta {:file "/home/dna-dev/Documents/practice/clojurepractice/src/clojurepractice/core.cljs", :line 81, :column 7, :end-line 81, :end-column 14, :arglists (quote ([iteration]))}, :name clojurepractice.core/buttons, :variadic false, :file "src/clojurepractice/core.cljs", :end-column 14, :method-params ([iteration]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 81, :end-line 81, :max-fixed-arity 1, :fn-var true, :arglists (quote ([iteration]))}, inputs {:protocol-inline nil, :meta {:file "/home/dna-dev/Documents/practice/clojurepractice/src/clojurepractice/core.cljs", :line 88, :column 7, :end-line 88, :end-column 13, :arglists (quote ([inputValue]))}, :name clojurepractice.core/inputs, :variadic false, :file "src/clojurepractice/core.cljs", :end-column 13, :method-params ([inputValue]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 88, :end-line 88, :max-fixed-arity 1, :fn-var true, :arglists (quote ([inputValue]))}, app {:protocol-inline nil, :meta {:file "/home/dna-dev/Documents/practice/clojurepractice/src/clojurepractice/core.cljs", :line 101, :column 7, :end-line 101, :end-column 10, :arglists (quote ([]))}, :name clojurepractice.core/app, :variadic false, :file "src/clojurepractice/core.cljs", :end-column 10, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 101, :end-line 101, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}}, :require-macros {cljs.core.async.macros cljs.core.async.macros}, :cljs.analyzer/constants {:seen #{:inputValue :num :placeholder :button :type :on-click :iteration :div :class :display :h2 :input :items :on-change :active-item :p :message}, :order [:iteration :inputValue :message :items :active-item :display :type :num :div :class :p :on-click :h2 :button :input :placeholder :on-change]}, :doc nil}